# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class Trace(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTrace(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Trace()
        x.Init(buf, n + offset)
        return x

    # Trace
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Trace
    def Observation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .NDArray import NDArray
            obj = NDArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Trace
    def Samples(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Sample import Sample
            obj = Sample()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Trace
    def SamplesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Trace
    def Hyperparameters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Trace
    def HyperparametersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def TraceStart(builder): builder.StartObject(3)
def TraceAddObservation(builder, observation): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(observation), 0)
def TraceAddSamples(builder, samples): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(samples), 0)
def TraceStartSamplesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TraceAddHyperparameters(builder, hyperparameters): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(hyperparameters), 0)
def TraceStartHyperparametersVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def TraceEnd(builder): return builder.EndObject()
