# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class UniformContinuous(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUniformContinuous(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UniformContinuous()
        x.Init(buf, n + offset)
        return x

    # UniformContinuous
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UniformContinuous
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # UniformContinuous
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # UniformContinuous
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def UniformContinuousStart(builder): builder.StartObject(3)
def UniformContinuousAddMin(builder, min): builder.PrependFloat64Slot(0, min, 0.0)
def UniformContinuousAddMax(builder, max): builder.PrependFloat64Slot(1, max, 0.0)
def UniformContinuousAddValue(builder, value): builder.PrependFloat64Slot(2, value, 0.0)
def UniformContinuousEnd(builder): return builder.EndObject()
