# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class Laplace(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLaplace(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Laplace()
        x.Init(buf, n + offset)
        return x

    # Laplace
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Laplace
    def Mean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Laplace
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Laplace
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def LaplaceStart(builder): builder.StartObject(3)
def LaplaceAddMean(builder, mean): builder.PrependFloat64Slot(0, mean, 0.0)
def LaplaceAddScale(builder, scale): builder.PrependFloat64Slot(1, scale, 0.0)
def LaplaceAddValue(builder, value): builder.PrependFloat64Slot(2, value, 0.0)
def LaplaceEnd(builder): return builder.EndObject()
