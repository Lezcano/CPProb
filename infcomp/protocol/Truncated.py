# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class Truncated(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTruncated(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Truncated()
        x.Init(buf, n + offset)
        return x

    # Truncated
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Truncated
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Truncated
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Truncated
    def Distribution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TableDistribution import TableDistribution
            obj = TableDistribution()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TruncatedStart(builder): builder.StartObject(3)
def TruncatedAddMin(builder, min): builder.PrependFloat64Slot(0, min, 0.0)
def TruncatedAddMax(builder, max): builder.PrependFloat64Slot(1, max, 0.0)
def TruncatedAddDistribution(builder, distribution): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(distribution), 0)
def TruncatedEnd(builder): return builder.EndObject()
