# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class ProductDistribution(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsProductDistribution(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProductDistribution()
        x.Init(buf, n + offset)
        return x

    # ProductDistribution
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProductDistribution
    def Distributions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .TableDistribution import TableDistribution
            obj = TableDistribution()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProductDistribution
    def DistributionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ProductDistribution
    def Shape(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ProductDistribution
    def ShapeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ProductDistributionStart(builder): builder.StartObject(2)
def ProductDistributionAddDistributions(builder, distributions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(distributions), 0)
def ProductDistributionStartDistributionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ProductDistributionAddShape(builder, shape): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)
def ProductDistributionStartShapeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ProductDistributionEnd(builder): return builder.EndObject()
