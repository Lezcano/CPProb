namespace protocol;

union MessageBody {
    // Compile
    RequestTraces,
    ReplyTraces,
    // Inference
    RequestStartInference,
    ReplyStartInference,
    RequestProposal,
    ReplyProposal
}

table Message {
    body: MessageBody;
}

union Distribution {
    Beta,
    Discrete,
    Flip,
    Gamma,
    Laplace,
    Mixture,
    MultivariateNormal,
    Normal,
    Poisson,
    Truncated,
    UniformContinuous,
    UniformDiscrete
}

table NDArray {
    data: [double];
    shape: [int];
}

table Beta {
    mode: double;      // [0, 1]
    certainty: double; // R^+
    value: double;     // [0, 1]
}

table Discrete {
    min: int;                // N
    max: int;                // N
    probabilities: [double]; // \sum probabilities = 1, probabilities >= 0, size(probabilities) = max - min + 1
    value: int;              //  [min, max]
}

table Flip {
    probability: double; // [0, 1]
    value: int;          // {0, 1}
}

table Gamma {
    shape: double;    // (alpha) R^+
    scale: double;    // (beta)  R^+
    value: double;    // R^+
}

table Laplace {
    mean: double;    // R
    scale: double;   // R^+
    value: double;   // R^+
}

// Hack to get over the fact that Flatbuffers odes not supports lists of unions
// https://github.com/google/flatbuffers/issues/3838
// Error: Vector of unions are not yet supported in Flatbuffers python
table TableDistribution {
    distribution: Distribution;
}

table Mixture {
    // size(coefficients) == size(distributions)
    coefficients: [double];         // \sum coefficients = 1, coefficients >= 0
    distributions: [TableDistribution];
}

table ProductDistribution {
    distributions: [TableDistribution];
    shape: [int];
}

table MultivariateNormal {
    // size(mean) == size(covariance)
    mean: NDArray;        // Tensor
    covariance: [double]; // R^n (Diagonal matrix)
    value: NDArray;       // Tensor
}

table Normal {
    mean: double;    // R
    std: double;     // R^+
    value: double;   // R
}

table Poisson {
    mean: double;   // R
    value: int;     // N
}

table Truncated {
    min: double;                    // R
    max: double;                    // R
    distribution: TableDistribution;
}

table UniformContinuous {
    min: double;     // R
    max: double;     // R
    value: double;  // [min, max]
}

table UniformDiscrete {
    min: int;    // N
    max: int;    // N
    value: int;  // {min, ..., max}
}

table Sample {
    address: string;
    distribution: Distribution;
}

table Trace {
    observe: NDArray;
    samples: [Sample];
}


// Messages
// Compilation
table RequestTraces {
    num_traces: int;
}

table ReplyTraces {
    traces: [Trace];
}

// Inference
table RequestStartInference {
    observation: NDArray;
}

table ReplyStartInference {}

table RequestProposal {
    current_sample: Sample;
    previous_sample: Sample;
}

table ReplyProposal {
    distribution: Distribution;
}

root_type Message;
