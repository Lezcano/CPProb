namespace protocol;

union MessageBody {
    // Compile
    RequestTraces,
    ReplyTraces,
    // Inference
    StartInference,
    StartTrace,
    RequestProposal,
    ReplyProposal
}

table Message {
    body:MessageBody;
}

root_type Message;
file_identifier "INFC";

union Distribution {
    Beta,
    Discrete,
    Flip,
    Gamma,
    Laplace,
    MixtureTruncated,
    MultivariateNormal,
    Normal,
    Poisson,
    Truncated,
    UniformContinuous,
    UniformDiscrete
}

table NDArray {
    data:[double];
    shape:[int];
}

table Beta {
    mode:double;      // [0, 1]
    certainty:double; // R^+
    value:double;     // [0, 1]
}

table Discrete {
    min:int;                // N
    probabilities:[double]; // \sum probabilities = 1, probabilities >= 0
    value:int;              //  [min, min + size(probabilities)-1]
}

table Flip {
    probability:double; // [0, 1]
    value:int;          // {0, 1}
}

table Gamma {
    shape: double;    // (alpha) R^+
    scale: double;    // (beta)  R^+
    value: double;    // R^+
}

table Laplace {
    mean: double;    // R
    scale: double;   // R^+
    value: double;   // R^+
}

// We cannot make the code truly generic (Mixture table) since flatbuffer python does not support it
// Error: Vector of unions are not yet supported in Flatbuffers python
table MixtureTruncated {
    // size(coefficients) == size(distributions)
    coefficients: [double];         // \sum coefficients = 1, coefficients >= 0
    distributions: [Truncated];
}

table MultivariateNormal {
    // size(mean) == size(covariance)
    mean: [double];       // R^n
    covariance: [double]; // R^n (Diagonal matrix)
    value: [double];      // R^n
}

table Normal {
    mean: double;    // R
    std: double;     // R^+
    value: double;   // R
}

table Poisson {
    mean: double;   // R
    value: int;     // N
}

table Truncated {
    min: double;                    // R
    max: double;                    // R
    distribution: Distribution;
}

table UniformContinuous {
    min: double;     // R
    max: double;     // R
    value: double;  // [min, max]
}

table UniformDiscrete {
    min: int;    // N
    max: int;    // N
    value: int;  // {min, ..., max}
}

table Sample {
    address:string;
    distribution:Distribution;
}

table Trace {
    observe:NDArray;
    samples:[Sample];
}


// Messages
// Compilation
table RequestTraces {
    num_traces:int;
}

table ReplyTraces {
    traces:[Trace];
}

// Inference
table StartInference {
    observation:NDArray;
}

table StartTrace {}

table RequestProposal {
    current_sample:Sample;
    previous_sample:Sample;
}

table ReplyProposal {
    distribution:Distribution;
}
