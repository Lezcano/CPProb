# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class RequestProposal(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRequestProposal(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RequestProposal()
        x.Init(buf, n + offset)
        return x

    # RequestProposal
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RequestProposal
    def CurrentSample(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Sample import Sample
            obj = Sample()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RequestProposal
    def PreviousSample(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Sample import Sample
            obj = Sample()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RequestProposalStart(builder): builder.StartObject(2)
def RequestProposalAddCurrentSample(builder, currentSample): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(currentSample), 0)
def RequestProposalAddPreviousSample(builder, previousSample): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(previousSample), 0)
def RequestProposalEnd(builder): return builder.EndObject()
