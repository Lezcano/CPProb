# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class UniformDiscrete(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUniformDiscrete(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UniformDiscrete()
        x.Init(buf, n + offset)
        return x

    # UniformDiscrete
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UniformDiscrete
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UniformDiscrete
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UniformDiscrete
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def UniformDiscreteStart(builder): builder.StartObject(3)
def UniformDiscreteAddMin(builder, min): builder.PrependInt32Slot(0, min, 0)
def UniformDiscreteAddMax(builder, max): builder.PrependInt32Slot(1, max, 0)
def UniformDiscreteAddValue(builder, value): builder.PrependInt32Slot(2, value, 0)
def UniformDiscreteEnd(builder): return builder.EndObject()
